# Generated by Django 3.0.2 on 2020-02-12 17:04

import ckeditor.fields
import ckeditor_uploader.fields
from django.db import migrations, models
import django.db.models.deletion
import imagekit.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Catalizator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=400, null=True, verbose_name='Заголовок')),
                ('text1', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Текст по катализаторам')),
                ('text2', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Текст по катализаторам')),
                ('image1', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото верх')),
                ('image2', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото низ')),
            ],
            options={
                'verbose_name': 'Катализаторы',
                'verbose_name_plural': 'Катализаторы',
            },
        ),
        migrations.CreateModel(
            name='Metall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seotitle', models.CharField(blank=True, max_length=300, null=True, verbose_name='Seo-title')),
                ('en_seotitle', models.CharField(blank=True, max_length=300, null=True, verbose_name='EN--->Seo-title')),
                ('seodescript', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Seo-description')),
                ('en_seodescript', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='EN--->Seo-description')),
                ('seokeywords', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Seo-keywords')),
                ('en_seokeywords', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='EN--->Seo-keywords')),
                ('canonicdes', models.BooleanField(default=True, verbose_name='Поставить каноническую ссылку на описание')),
                ('canonicder', models.BooleanField(default=False, verbose_name='Поставить каноническую ссылку на справочник')),
                ('indexdes', models.BooleanField(default=False, verbose_name='Noindex на описание')),
                ('indexder', models.BooleanField(default=False, verbose_name='Noindex на справочник')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('en_title', models.CharField(blank=True, max_length=200, null=True, verbose_name='EN--->Название')),
                ('titlealt', models.CharField(blank=True, max_length=200, null=True, verbose_name='Альтернативный заголовок страницы')),
                ('en_titlealt', models.CharField(blank=True, max_length=200, null=True, verbose_name='EN--->Альтернативный заголовок страницы')),
                ('slug', models.SlugField(unique=True)),
                ('alterslug', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Адрес для замены описания на ссылку')),
                ('price', models.CharField(max_length=200, verbose_name='Стоимость|Наличный расчет')),
                ('price_bn', models.CharField(blank=True, max_length=200, null=True, verbose_name='Стоимость|Безналичный расчет')),
                ('oldprice', models.CharField(blank=True, max_length=200, null=True)),
                ('description1', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Описание лома')),
                ('description_clear', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Очищенное описание')),
                ('en_description1', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='EN--->Описание лома')),
                ('description2', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Описание металла/сплава')),
                ('en_description2', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='EN--->Описание металла/сплава')),
                ('description_amp', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Описание для AMP страниц')),
                ('en_description_amp', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='EN--->Описание для AMP страниц')),
                ('add', models.DateTimeField(auto_now_add=True, verbose_name='Добавлено')),
                ('visible', models.BooleanField(default=True, verbose_name='Видимость')),
                ('priority', models.FloatField(blank=True, null=True, verbose_name='Приоритет(для прайса на главной)')),
                ('group', models.IntegerField(blank=True, null=True, verbose_name='Группа(для полного прайса)')),
                ('group_priority', models.FloatField(blank=True, null=True, verbose_name='Порядок следования в группе')),
                ('tablepricegroup', models.IntegerField(blank=True, null=True, verbose_name='Группа для формрования таблицы цен')),
                ('vkid', models.IntegerField(blank=True, null=True, verbose_name='Id товара в ВКОНТАКТЕ')),
                ('photo_grid', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото для справочника')),
                ('photo_metall', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото для слайдера')),
                ('photo_amp_1', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото №1 для AMP-карусели')),
                ('photo_amp_2', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото №2 для AMP-карусели')),
                ('photo_amp_3', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото №3 для AMP-карусели')),
            ],
            options={
                'verbose_name': 'Металл или сплав',
                'verbose_name_plural': 'Металлы и сплавы',
            },
        ),
        migrations.CreateModel(
            name='MetallCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название категории')),
            ],
            options={
                'verbose_name': 'Категория металлов',
                'verbose_name_plural': 'Категория металлов',
                'db_table': 'metallcategory',
            },
        ),
        migrations.CreateModel(
            name='PositionFooter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Блок')),
                ('text_amp', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Блок|AMP вариант')),
            ],
            options={
                'verbose_name': 'Блок контактов в описании позиции',
                'verbose_name_plural': 'Блок контактов в описании позиции',
                'db_table': 'positionfooter',
            },
        ),
        migrations.CreateModel(
            name='PriceData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pricedate', models.CharField(blank=True, max_length=50, null=True, verbose_name='Прайс от...')),
                ('oldpricedate', models.CharField(blank=True, max_length=50, null=True, verbose_name='Старая дата прайса')),
            ],
            options={
                'verbose_name': 'Дата изменения прайса',
                'verbose_name_plural': 'Дата изменения прайса',
            },
        ),
        migrations.CreateModel(
            name='PriceRare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Прайс')),
            ],
            options={
                'verbose_name': 'Прайс редких металлов и сплавов',
                'verbose_name_plural': 'Прайс редких металлов и сплавов',
            },
        ),
        migrations.CreateModel(
            name='TantalDesc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=400, null=True, verbose_name='Заголовок к описанию')),
                ('sub1', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Текст | Абзац 1')),
                ('sub2', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Текст | Абзац 2')),
                ('image', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото для оформления')),
            ],
            options={
                'verbose_name': 'Тантал описание',
                'verbose_name_plural': 'Тантал описание',
            },
        ),
        migrations.CreateModel(
            name='TantalPositions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=400, null=True, verbose_name='Название позиции')),
                ('price', models.CharField(max_length=200, verbose_name='Цена')),
                ('priority', models.FloatField(blank=True, null=True, verbose_name='Порядок следования')),
            ],
            options={
                'verbose_name': 'Тантал позиции',
                'verbose_name_plural': 'Тантал позиции',
            },
        ),
        migrations.CreateModel(
            name='TantalFoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('foto', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото для позиции тантала')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', related_query_name='position', to='positions.TantalPositions', verbose_name='Тантал позиция')),
            ],
            options={
                'verbose_name': 'Фото для позиций тантала',
                'verbose_name_plural': 'Фото для позиций тантала',
            },
        ),
        migrations.CreateModel(
            name='PositionFoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('foto', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='media/', verbose_name='Фото для позиций')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='positions.Metall', verbose_name='Металл или сплав')),
            ],
            options={
                'verbose_name': 'Фото для позиции',
                'verbose_name_plural': 'Фото для позиции',
            },
        ),
        migrations.AddField(
            model_name='metall',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='positions.MetallCategory', verbose_name='Категория металлов'),
        ),
    ]
